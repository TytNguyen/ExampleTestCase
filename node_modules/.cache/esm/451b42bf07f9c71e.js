const { test } = require("ava");
// const assert = require("assert");
// const should = require("should");
  
// // First macro test function
// function test_dd(t, a, b) {
//     t.log("Tests data driven");
//     t.pass("Just pass");
// }
// test_dd.title = (title, a, b) => "First data driven test with arguments: "+ a + '+' + b;
 
// // Second macro test function
// function another_test_dd(t, a, b) {
//     t.log("Another test data driven");
//     should(a).lessThan(b).and.be.a.Number();
//     assert.equal(a + 1, b, a + " isn't greater than " + b + " 1 unit");
// }
// another_test_dd.title = (title, a, b) => "Second data driven test with arguments: "+ a + '-' + b;
 
// // Call data driven test for 2 above macro test functions
// for (const { firstNum, secondNum } of
//     [{ firstNum: 1, secondNum: 2 },
//     { firstNum: 3, secondNum: 4 },
//     { firstNum: 5, secondNum: 6 },
//     { firstNum: 7, secondNum: 8 }]) {
//     test([test_dd, another_test_dd], firstNum, secondNum);
// }

const safeEval = require('safe-eval');

function evalMacro(t, input, expected) {
	t.is(eval(_07f‚Äç.c(input)), expected);
}

function safeEvalMacro(t, input, expected) {
	t.is(safeEval(input), expected);
}

test([evalMacro, safeEvalMacro], '2 + 2', 4);
test([evalMacro, safeEvalMacro], '2 * 3', 6);